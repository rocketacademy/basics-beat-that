Beat That
// Two game states
// First game state is for Player 1 to roll dice. 
// The dice will roll twice and be stored in an array
// Change to next game state to ask Player 1 for which dice number should be in the tens position
// input is player's choice
// program will then store Player 1's final number

// Game state will change to roll Player 2's dice
//// The dice will roll twice and be stored in an array
// Change to next game state to ask Player 2 for which dice number should be in the tens position
// input is player's choice
// program will then store Player 2's final number

// Game state will change to compare the two Player's numbers
// final output is to compare Player 1 and Player 2's final number to see whose one is bigger

Bug where if the two numbers are the same, the final number will be nan
return the element that is of the other index 

When outputting game results in the output box, also output a leaderboard that lists the 2 players and their scores in decreasing order.

// input is the running scores
// program needs to compare the running scores
// after comparing, need to manipulate the output value to have the higher one on top
// return this
// output will be the higher running score on top of the lower one

// Lowest Combined Number Mode
// Add a game mode such that the player with the lowest combined number is the winner.
/* gameStates:
- rollPlayerOneDice
- askPlayerOneChoice
- rollPlayerTwoDice
- askPlayerTwoChoice
- checkResult */
// need to have use an input to change the gameState from checkResult to a checkResultLowest 
// output will be the reverse of checkResult i.e. lowest combined number wins instead of highest
// insert an intermediate gameState to ask user to input which gameState they want: checkResultNormal or checkResultLowest
// insert another gameState for checkResultLowest which outputs winner based on lowest combined score instead
// then we switch the gameState accordingly

// Auto-Generate Combined Number
/* Update the game to auto-generate the highest (or lowest) combined number from dice rolls. For example, for dice rolls [6, 3] in Lowest Combined Number mode, the game would auto-generate the combined number 36. */
// means i dont even need the askPlayerOneChoice and askPlayerTwoChoice game states already?

// HTML code to tell user to input "normal" or "lowest" to start the game
// need to have a starting gameState = "start"
// 1. starting gameState will ask userChoice = input for "normal" or "lowest" game mode
// user validation
// helper function to return the next gameState = "normalRollDice" or "lowestRollDice"
// output will be `You chose ${userChoice} game mode. Press Submit to roll the dice.`
// roll the dice here also to make it more efficient i.e. just need to code it once

// 2. gameState both "normalRollDice" and "lowestRollDice" will then roll two dices using for loop 
// based on the game mode, use Math.max or Math.min(...array) first, then the other second to get the 1st and 2nd numbers spread operator to spread the array in the Math method. 
// Store 1st number in playerXFirstNum, 2nd number in playerXSecondNum
// Concatenate and convert to the final number using helper function. Store in playerXFinalNumber
// update the running score using helper function
// output will be `Player 1 rolled X for Dice 1 and Y for Dice 2. <br> Player 1 auto-gen number is XY.<br> Player 1 running score is XXX. <br> <br> Player 2 rolled A for Dice 1 and B for Dice 2 <br> Player 2 auto-gen number is AB. <br> Player 2 running score is YYY <br> <br> Press Submit to find winner based on "normal"/"lowest" game state`
// change gameState to "checkResultNormal" or "checkResultLowest"

// 3. can take the already used checkResult code
// output the leader and the leaderboard

for refactoring
- can make a global userChoice to store normal or lowest
- then after he input, do the 

// Refactoring
// Im repeating the playerOneFinalNumber to playerTwoRunningScore codes in "normal" and "lowest" gameStates
// change gameState to "getNumbers"
// if userChoice == "normal"
// Math.max for first num, Math.min for second num
// else 
// Math.min for first num, Math.min for second num

// Variable num of dice rolls
// first input is to ask how many dice to roll
// then roll X amount of dice for each of the two players
// the dice rolls are stored in respective player's array
// output the dice roll values
// next state is to auto-generate the optimal combined number
// i assume input here will be "normal" or "lowest" game state
// sort the arrays based on descending or ascending order
// concatenate them and return as numbers
// output the final numbers and go to next state
// next state is to check result
// purely based on whose number is bigger or smaller and display winner

/* 4 game states
0. gameState = "gameMode" as the starting global variable
- user validation
- user input either "normal" or "lowest"
- store this in a global variable called gameMode to use later
- output is "Enter the number of dice you want to roll"
- change gameState = "rollDice"
1. gameState = "rollDice"
- user validation
- numOfDice = input
- for (var i = 0; i < numOfDice; i++) {
playerOneDiceRolls[i] = rollDice()
repeat for playerTwoDiceRolls array
- output the dice roll values for Player One and Player Two. Tell user to press Submit to generate numbers
- gameState = "generateNums"

2. gameState = "generateNums"
- if (chosenGameMode == "lowest")
use array.sort(compare function)
compare function is a function that takes two numbers and returns the value of a - b. This will then be passed to the sort function to determine the placing i.e. a first or b second
array will be returned in ascending order
- else (for normal)
reverse the ascending order sort

- some function to concatenate the numbers in the arrays to the final numbers
- output these are the auto-gen numbers based on the chosenGameMode. Press Submit to check result
- gameState = "checkResult"

3. gameState = "checkResult"
- if (userChoice == "normal")
 // function to check who is the leader in terms of running score
    leader = checkLeader(playerOneRunningScore, playerTwoRunningScore);
    // function to display leaderboard
    leaderboard = displayLeaderboard(
      playerOneRunningScore,
      playerTwoRunningScore
    );
    myOutputValue = `Current Leader based on normal game state is ${leader}.<br><br>${leaderboard}<br><br>Enter "normal" or "lowest" again to enter your game choice`;
    gameState = "start";
- else (userChoice == "lowest")
// function to check who is the "winner" in terms of lowest running score
    lowestLeader = checkLowest(playerOneRunningScore, playerTwoRunningScore);
    // function to display leaderboard
    lowestLeaderboard = displayLowestLeaderboard(
      playerOneRunningScore,
      playerTwoRunningScore
    );
    myOutputValue = `Current Leader based on lowest combined number game state is ${lowestLeader}.<br><br>${lowestLeaderboard}<br><br>Enter "normal" or "lowest" again to enter your game choice`;
    gameState = "start"; */

/* Variable Number of Players
Allow more than 2 players at a time to play Beat That. At the beginning of the game, ask how many players would like to play. For a variable number of players, feel free to output the leaderboard in any order, because implementing the leaderboard in decreasing order requires advanced logic.

Current beat that is:
- ask for normal or lowest game mode
- how many dice to roll
- then auto-generate the numbers 
- and compare who wins

- input is the numOfPlayers
- for each player, roll the number of dice selected
- need a way to refer back to each player's rolls

- use double for loop
- inner for loop is to roll the number of dices specified
- outer for loop will then do the inner loop for how many players specified

Flow of program will be:
0. chooseGameMode
1. selectNumOfPlayers
2. rollDice
3. generateNums
4. checkResult

0. change ending gameState to "selectNumOfPlayers"

1. selectNumOfPlayers
- create global var numOfPlayers so we can access it in rollDice game state
- user validation use the same one as rollDice cos we only want numbers min. value 2
- numOfPlayers = input;
- output how many players selected. Next, input the number of dice to roll

2. rollDice
- change the code in the else block
- create global var everyPlayersRolls array to store every player's rolls
- double for loop below can make into a helper function
storeEveryPlayerRolls (howManyPlayers, howManyDice)
for (var i = 0; i < numOfPlayers; i++) {
	var onePlayerRoll = [];
  for (var j = 0; j < numOfDice; j++) {
    onePlayerRoll[j] = rollDice();
  }
  allPlayersRolls[i] = onePlayerRoll;
}
return allPlayersRolls;
- everyPlayersRolls = storeEveryPlayerRolls(numOfPlayers, numOfDice);
- for output
for (var i = 0; i < numOfPlayers; i++) {
	output = output + "Player ${i+1} rolled ${everyPlayersRolls[i]}<br>";
}
output = output + "Press Submit to generate the numbers"
gameState = "generateNums"

3. generateNums
- global array everyPlayersFinalNum
- reassign each array inside everyPlayersRolls to the sorted one
- need to add if (gameMode = "normal") to differentiate the two codes
for (var i = 0; i < numOfPlayers; i++) {
	everyPlayersRolls[i] = everyPlayersRolls[i].sort(compare);
	everyPlayersFinalNum[i] = Number(everyPlayersRolls[i].join(""));
	output = output + "Player ${i+1} final number is ${everyPlayersFinalNum[i]}<br>";
}
- else the lowest game mode, just reverse() and reassign
for (var i = 0; i < numOfPlayers; i++) {
	everyPlayersRolls[i] = everyPlayersRolls[i].reverse();
	everyPlayersFinalNum[i] = Number(everyPlayersRolls[i].join(""));
	output = output + "Player ${i+1} final number is ${everyPlayersFinalNum[i]}<br>";
}
output = output + `Restart the game by choosing game mode "normal" or "lowest"`
gameState = "chooseGameMode"

4. checkResult
- need to use objects which we haven't learned
- can come back to this when i've got the knowledge and time

4. checkResult
- at least try to return the winner?
- if chosenGameMode == "normal" use max to find the highest number and store it in winningNum, else if chosenGameMode == "lowest", then use min to find the lowest number 
var max = Math.max(...everyPlayersFinalNum);
var maxIndex = everyPlayersFinalNum.indexOf(max);
console.log(maxIndex)

var min = Math.min(...everyPlayersFinalNum);
var minIndex = everyPlayersFinalNum.indexOf(min);
console.log(minIndex)

*/

Refactoring:
- principles to follow like single responsibility etc
- dont repeat yourself
- efficiency of code






