// Requirements
// There are 2 players and players take turns.
// When a player clicks Submit, the game rolls 2 dice and shows the dice rolls, for example 3 and 6.
// The player picks the order of the dice they want. For example, if they wanted the number 63, they would specify that the 2nd dice goes first. You can choose how the player specifies dice order.
// After both players have rolled and chosen dice order, the player with the higher combined number wins.

// More Comfortable

// Score
// Keep score for each player. The score is the running sum of all numbers that player has generated so far. This means there is no permanent winner, only a temporary leader.
// Leaderboard
// When outputting game results in the output box, also output a leaderboard that lists the 2 players and their scores in decreasing order.

// Lowest Combined Number Mode
// Add a game mode such that the player with the lowest combined number is the winner.
// Auto-Generate Combined Number
// Update the game to auto-generate the highest (or lowest) combined number from dice rolls. For example, for dice rolls [6, 3] in Lowest Combined Number mode, the game would auto-generate the combined number 36.

// Variable Number of Dice
// 1. Create a new version of Beat That that rolls two or more dice per player.
// 2. At the beginning of each round, ask the players how many dice they would like to play with. Both players will roll the same number of dice each round.
// 3. Store each player's dice rolls in an array. When each player rolls dice, use a loop to place n dice roll values in that player's array, where n is the number of dice the players specified at the beginning of the round. Output each player's dice roll values.
// 4. Auto-generate the optimal combined number based on each player's dice rolls to determine the winner of that round.
// Variable Number of Players
// Allow more than 2 players at a time to play Beat That. At the beginning of the game, ask how many players would like to play. For a variable number of players, feel free to output the leaderboard in any order, because implementing the leaderboard in decreasing order requires advanced logic.

// Game modes
// Lowest Combined Number Mode
// Add a game mode such that the player with the lowest combined number is the winner.
// Auto-Generate Combined Number
// Update the game to auto-generate the highest (or lowest) combined number from dice rolls. For example, for dice rolls [6, 3] in Lowest Combined Number mode, the game would auto-generate the combined number 36.
// Variable Number of Dice
// 1. Create a new version of Beat That that rolls two or more dice per player.
// 2. At the beginning of each round, ask the players how many dice they would like to play with. Both players will roll the same number of dice each round.
// 3. Store each player's dice rolls in an array. When each player rolls dice, use a loop to place n dice roll values in that player's array, where n is the number of dice the players specified at the beginning of the round. Output each player's dice roll values.
// 4. Auto-generate the optimal combined number based on each player's dice rolls to determine the winner of that round.
// Variable Number of Players
// Allow more than 2 players at a time to play Beat That. At the beginning of the game, ask how many players would like to play. For a variable number of players, feel free to output the leaderboard in any order, because implementing the leaderboard in decreasing order requires advanced logic.

var DICE_ROLL_GAME_MODE = "diceRollGameMode";
var ORDER_OF_DICE_GAME_MODE = "orderOfDiceGameMode";
var AUTO_GENERATE_DICE_ORDER_GAME_MODE = "autoGenerateDiceOrderGameMode";
var NORMAL_GAME_MODE = "normalGameMode";
var LOWEST_COMBINED_NUMBER_GAME_MODE = "lowestCombinedNumberGameMode";
var NUMBER_OF_DICE_GAME_MODE = "numOfDiceGameMode";
var NUMBER_OF_PLAYERS_GAME_MODE = "numOfPlayersGameMode";

// Initialise the game to start with the dice roll game mode by default - to update later in game

var inputGameMode = null;

// Start at dice roll
// More comfortable - start at choosing number of players mode
var currentGameMode = NUMBER_OF_PLAYERS_GAME_MODE;

// There are 2 players and players take turns.
// The game starts with Player 1 by default - to update later in game
// More comfortable - to take in as input
var currentPlayer = 0;

// Storing dice rolls
var player1DiceRolls = [];
var player2DiceRolls = [];

// Storing each player's chosen numbers
var player1CombinedNumber = null;
var player2CombinedNumber = null;

// Score Tracking
// Score
// Keep score for each player. The score is the running sum of all numbers that player has generated so far. This means there is no permanent winner, only a temporary leader.
// More comfortable - to store player information as list of objects
var playerScores = [
  { number: 1, score: 0 },
  { number: 2, score: 0 },
];
var playerInfo = [];

// Store number of dice chosen to play
var numOfDice = 0;

// Store number of players
var numOfPlayers = 0;

// Store current round winner
var currentRoundWinner = null;

// Generate random dice roll
var rollDice = function () {
  var randomDecimal = Math.random() * 6;
  var randomInteger = Math.floor(randomDecimal);
  var diceNumber = randomInteger + 1;
  return diceNumber;
};

// Generate dice rolls and add to respective lists
// var getDiceRolls = function () {
//   var currentDiceRolls = [rollDice(), rollDice()];

//   if (currentPlayer === 1) {
//     player1DiceRolls = currentDiceRolls;
//   } else {
//     player2DiceRolls = currentDiceRolls;
//   }

//   return currentDiceRolls;
// };

// More comfortable - variable number of dice and players
// Generate dice rolls for 1 player, then push to list and push to player
var getDiceRolls = function () {
  var currentDiceRolls = [];

  for (var i = 0; i < numOfDice; i += 1) {
    currentDiceRolls.push(rollDice());
  }

  playerInfo[currentPlayer].diceRolls = currentDiceRolls;

  return currentDiceRolls;
};

// Obtain combined number - convert to string and then back to number type
var getCombinedNumber = function (number1, number2) {
  return Number(String(number1) + String(number2));
};

// Sorting list of scores for combined number game modes
// Auto-Generate Combined Number
// Update the game to auto-generate the highest (or lowest) combined number from dice rolls. For example, for dice rolls [6, 3] in Lowest Combined Number mode, the game would auto-generate the combined number 36.
var sortList = function (listArray) {
  var listLength = listArray.length;

  for (var i = 0; i < listLength - 1; i += 1) {
    for (var j = 0; j < listLength - 1; j += 1) {
      if (listArray[j] > listArray[j + 1]) {
        var compare = listArray[j];
        listArray[j] = listArray[j + 1];
        listArray[j + 1] = compare;
      }
    }
  }
  return listArray;
};

// Check player number, storing combined number
var getPlayerNumber = function (diceNumberChosen) {
  // Check current list and assign to access accordingly
  var diceList = null;
  var chosenNumber = null;

  if (currentPlayer === 1) {
    diceList = player1DiceRolls;
  } else {
    diceList = player2DiceRolls;
  }
  // Check and assign chosen number - accessing index respectively
  if (diceNumberChosen === 1) {
    chosenNumber = getCombinedNumber(diceList[0], diceList[1]);
  } else {
    chosenNumber = getCombinedNumber(diceList[1], diceList[0]);
  }

  // Store player num in the relevant global player num variable
  if (currentPlayer === 1) {
    player1CombinedNumber = chosenNumber;
  } else {
    player2CombinedNumber = chosenNumber;
  }

  // Return generated player num to parent function
  return chosenNumber;
};

// Check who wins
var checkWinner = function () {
  if (player1CombinedNumber > player2CombinedNumber) {
    return 1;
  }
  return 2;
};

// More comfortable - lowest combined number
// var generatePlayerNumber = function () {
//   // Check current list and assign to access accordingly
//   var diceList = null;
//   var chosenNumber = null;

//   if (currentPlayer === 1) {
//     diceList = player1DiceRolls;
//   } else {
//     diceList = player2DiceRolls;
//   }

//   sortList(diceList);

//   // Sort list small to big
//   // Lowest Combined Number Mode
//   // Add a game mode such that the player with the lowest combined number is the winner.
//   while (diceList.length > 0) {
//     var biggestNumber = diceList.pop();

//     // 1st iteration is just number itself
//     if ((chosenNumber = null)) {
//       chosenNumber = biggestNumber;
//     } // Combine to get number for lowest
//     else {
//       if (inputGameMode == LOWEST_COMBINED_NUMBER_GAME_MODE) {
//         chosenNumber = getCombinedNumber(biggestNumber, chosenNumber);
//       } // If not it's normal mode, biggest number
//       else {
//         chosenNumber = getCombinedNumber(chosenNumber, biggestNumber);
//       }
//     }
//   }

//   // Store player num in the relevant global player num variable
//   if (currentPlayer === 1) {
//     player1CombinedNumber = chosenNumber;
//   } else {
//     player2CombinedNumber = chosenNumber;
//   }

//   // Return generated player num to parent function
//   return chosenNumber;
// };

// More comfortable - auto generation for variable modes
var generatePlayerNumber = function () {
  // Check current list and assign to access accordingly
  var diceList = playerInfo[currentPlayer].diceRolls;
  var chosenNumber;

  sortList(diceList);

  // Sort list small to big
  // Lowest Combined Number Mode
  // Add a game mode such that the player with the lowest combined number is the winner.
  while (diceList.length > 0) {
    var biggestNumber = diceList.pop();

    // 1st iteration is just number itself
    if ((chosenNumber = null)) {
      chosenNumber = biggestNumber;
    } // Combine to get number for lowest
    else {
      if (inputGameMode == LOWEST_COMBINED_NUMBER_GAME_MODE) {
        chosenNumber = getCombinedNumber(biggestNumber, chosenNumber);
      } // If not it's normal mode, biggest number
      else {
        chosenNumber = getCombinedNumber(chosenNumber, biggestNumber);
      }
    }
    // Update the number to player's info
    playerInfo[currentPlayer].combinedNum = chosenNumber;
    return chosenNumber;
  }
};

// Store player num in the relevant global player num variable
var updatePlayerCombinedNumber = function (chosenNumber) {
  if (currentPlayer === 1) {
    player1CombinedNumber = chosenNumber;
  } else {
    player2CombinedNumber = chosenNumber;
  }
};

// Sort by keys
var sortListByKey = function (listArray, key) {
  var listLength = listArray.length;

  for (var i = 0; i < listLength - 1; i += 1) {
    for (var j = 0; j < listLength - 1; j += 1) {
      if (listArray[j][key] > listArray[j + 1][key]) {
        var compare = listArray[j];
        listArray[j] = listArray[j + 1];
        listArray[j + 1] = compare;
      }
    }
  }
  return listArray;
};

// // Check who wins
// // More comfortable - check game modes and update conditions
// var checkWinner = function () {
//   if (
//     inputGameMode == NORMAL_GAME_MODE &&
//     player1CombinedNumber > player2CombinedNumber
//   ) {
//     return 1;
//   } else if (
//     inputGameMode == LOWEST_COMBINED_NUMBER_GAME_MODE &&
//     player1CombinedNumber < player2CombinedNumber
//   ) {
//     return 1;
//   }
//   return 2;
// };

// // Access and update global player scores
// var updatePlayerScore = function (currentScore) {
//   if (currentPlayer === 1) {
//     playerScores[0].score += currentScore;
//   }
//   if (currentPlayer == 2) {
//     playerScores[1].score += currentScore;
//   }
// };

// Check who wins
// More comfortable - check game modes and update conditions for variable modes, compare and check 1 by 1
var checkWinner = function () {
  if (currentRoundWinner == null) {
    currentRoundWinner = playerInfo[currentPlayer];
  } else if (
    playerInfo[currentPlayer].combinedNum > currentRoundWinner.combinedNum
  ) {
    currentRoundWinner = playerInfo[currentPlayer];
  }
};

// // Access and update global player scores
// var updatePlayerScore = function (currentScore) {
//   if (currentPlayer === 1) {
//     playerScores[0].score += currentScore;
//   }
//   if (currentPlayer == 2) {
//     playerScores[1].score += currentScore;
//   }
// };

// Access and update global player scores for variable modes
var updatePlayerScore = function (currentScore) {
  playerInfo[currentPlayer].score += currentScore;
};

// // Leaderboard
// // When outputting game results in the output box, also output a leaderboard that lists the 2 players and their scores in decreasing order.
// var generateLeaderboardOutput = function () {
//   var leaderboardOutput = "Leaderboard: <br>";

//   // Check game modes and conditions
//   if (inputGameMode == NORMAL_GAME_MODE) {
//     // Loop through list to check biggest number, from front, else from back
//     if (playerScores[0].score > playerScores[1].score) {
//       for (var i = 0; i < playerScores.length; i += 1) {
//         leaderboardOutput +=
//           "Player " +
//           playerScores[i].number +
//           ": " +
//           playerScores[i].score +
//           "<br>";
//       }
//     } else if (playerScores[1].score > playerScores[0].score) {
//       for (var i = playerScores.length - 1; i >= 0; i -= 1) {
//         leaderboardOutput +=
//           "Player " +
//           playerScores[i].number +
//           ": " +
//           playerScores[i].score +
//           "<br>";
//       }
//     }
//     return leaderboardOutput;
//   }
//   if (inputGameMode == LOWEST_COMBINED_NUMBER_GAME_MODE) {
//     // Loop through list to check smallest number, from front, else from back
//     if (playerScores[0].score < playerScores[1].score) {
//       for (var i = 0; i < playerScores.length; i += 1) {
//         leaderboardOutput +=
//           "Player " +
//           playerScores[i].number +
//           ": " +
//           playerScores[i].score +
//           "<br>";
//       }
//     } else if (playerScores[1].score < playerScores[0].score) {
//       for (var i = playerScores.length - 1; i >= 0; i -= 1) {
//         leaderboardOutput +=
//           "Player " +
//           playerScores[i].number +
//           ": " +
//           playerScores[i].score +
//           "<br>";
//       }
//     }
//     return leaderboardOutput;
//   }
// };

// Leaderboard for variable modes
var generateLeaderboardOutput = function () {
  var leaderboardOutput = "Leaderboard: <br>";

  var sortedPlayerInfo = [];
  for (var i = 0; i < playerInfo.length; i += 1) {
    sortedPlayerInfo.push(playerInfo[i]);
  }

  // Sort by scores
  var sortByPlayerScore = sortListByKey(sortedPlayerInfo, "score");

  while (sortByPlayerScore.length > 0) {
    var topPlayer = sortByPlayerScore.pop();
    leaderboardOutput += "<br> Player " + topPlayer.id + ": " + topPlayer.score;
  }

  return leaderboardOutput;
};

// // Reset game
// var resetGame = function () {
//   currentPlayer = 1;
//   currentGameMode = DICE_ROLL_GAME_MODE;
// };

// Reset game - variable modes
var resetGame = function () {
  currentPlayer = 0;
  currentGameMode = NUMBER_OF_DICE_GAME_MODE;
  currentRoundWinner = null;
};

// Output message for rolls
var generateDiceRollsMessage = function (diceRollsList) {
  var outputMessage =
    "Welcome Player " + playerInfo[currentPlayer].id + ". Your dice rolls are:";

  // Loop through to get elements in list
  for (var i = 0; i < diceRollsList.length; i += 1) {
    outputMessage += "<br> Dice " + (i + 1) + ": " + diceRollsList[i];
  }
  return outputMessage;
};

// Generate player information
var generatePlayerInfo = function () {
  // Loop through n times, and create object with n keys
  for (var i = 0; i < numOfPlayers; i += 1) {
    playerInfo.push({ id: i + 1, diceRolls: [], combinedNum: 0, score: 0 });
  }
};

// Welcome Player 1.
// You rolled 3 for Dice 1 and 6 for Dice 2.
// Choose the order of the dice.

// Player 1, you chose Dice 2 first.
// Your number is 63.
// It is now Player 2's turn.

// var main = function (input) {
//   // When a player clicks Submit, the game rolls 2 dice and shows the dice rolls, for example 3 and 6.
//   // More comfortable
//   // Input validation
//   if (!inputGameMode) {
//     if (
//       input != NORMAL_GAME_MODE &&
//       input != LOWEST_COMBINED_NUMBER_GAME_MODE
//     ) {
//       return (
//         `You have entered an invalid game mode. Please choose 1 of the game modes to begin: <br> 1. ` +
//         NORMAL_GAME_MODE +
//         `<br> 2. ` +
//         LOWEST_COMBINED_NUMBER_GAME_MODE
//       );
//     }
//     inputGameMode = input;
//     return (
//       `You have chosen ` +
//       inputGameMode +
//       ` mode. Player ` +
//       currentPlayer +
//       ` , click submit to roll dice`
//     );
//   }
//   if (currentGameMode === DICE_ROLL_GAME_MODE) {
//     // Get dice rolls for curr player and populate the curr player's dice array
//     var getCurrentDiceRolls = getDiceRolls();
//     // After generating, proceed to order of dice
//     currentGameMode = ORDER_OF_DICE_GAME_MODE;
//     // Output message as above
//     // More comfortable - edited message
//     return `Welcome Player ${currentPlayer}. <br>
//       You rolled ${getCurrentDiceRolls[0]} for Dice 1 and ${getCurrentDiceRolls[1]} for Dice 2. <br>
//       Click submit to get combined number.`;
//   }

//   // The player picks the order of the dice they want. For example, if they wanted the number 63, they would specify that the 2nd dice goes first. You can choose how the player specifies dice order.
//   // More comfortable -  generate automatically
//   if (currentGameMode == AUTO_GENERATE_DICE_ORDER_GAME_MODE) {
//     // Obtain the information for player
//     var playerCombinedNumber = generatePlayerNumber();
//     var playerCombinedNumberMessage = `Player ${currentPlayer}, your number is ${playerCombinedNumber}. <br>`;

//     // Update player number
//     updatePlayerCombinedNumber(playerCombinedNumber);

//     // Update player score
//     updatePlayerScore(playerCombinedNumber);

//     // If Player 1, change to Player 2, reset to dice roll mode
//     if (currentPlayer === 1) {
//       currentPlayer = 2;
//       currentGameMode = DICE_ROLL_GAME_MODE;
//       // Return player number to Player 1, let Player 2 know it is their turn
//       return `${playerCombinedNumberMessage} <br>
//         It is now Player 2's turn. Click Submit to roll dice.`;
//     }
//     // Else check winner and output accordingly.
//     var winningPlayer = checkWinner();

//     // Reset game after winner is checked
//     resetGame();

//     // Leaderboard message
//     var leaderboardOutputMessage = generateLeaderboardOutput();

//     // Return end of game message
//     return `${playerCombinedNumberMessage} <br>
//       Player ${winningPlayer} has won this round. <br>
//       Player 1's number: ${player1CombinedNumber} <br> Player 2's number: ${player2CombinedNumber} <br> <br> ${leaderboardOutputMessage} <br> <br>
//       The End of Round :) Press Submit to play again!`;
//   }
// };

// More comfortable - variable modes

var main = function (input) {
  if (currentGameMode == NUMBER_OF_PLAYERS_GAME_MODE) {
    // Input validation
    if (isNaN(input) || !Number(input) > 0) {
      return `You have entered an invalid number of players. Please enter a number greater than 0. `;
    }
    // Store number of players and create information accordingly, change game mode
    numOfPlayers = Number(input);
    generatePlayerInfo();

    currentGameMode = NUMBER_OF_DICE_GAME_MODE;
    return `There are ${numOfPlayers} players currently in this game. Please enter how many dice to play.`;
  }

  if (currentGameMode == NUMBER_OF_DICE_GAME_MODE) {
    // Input validation
    if (isNaN(input) || !Number(input) > 0) {
      return `You have entered an invalid number of players. Please enter a number greater than 0. `;
    }
    numOfDice = Number(input);

    currentGameMode = DICE_ROLL_GAME_MODE;
    return `You have chosen to play with ${numOfDice} dice. Player 1, click submit to roll dice(s).`;
  }

  if (currentGameMode === DICE_ROLL_GAME_MODE) {
    // Get dice rolls for curr player and populate the curr player's dice array
    var getCurrentDiceRolls = getDiceRolls();
    // After generating, proceed to order of dice
    currentGameMode = ORDER_OF_DICE_GAME_MODE;

    var diceRollInfo = generateDiceRollsMessage(getCurrentDiceRolls);
    return diceRollInfo;
  }

  // The player picks the order of the dice they want. For example, if they wanted the number 63, they would specify that the 2nd dice goes first. You can choose how the player specifies dice order.
  // More comfortable -  generate automatically
  // More comfortable - edited for variable modes
  if (currentGameMode == AUTO_GENERATE_DICE_ORDER_GAME_MODE) {
    // Obtain the information for player
    var playerCombinedNumber = generatePlayerNumber();
    var playerCombinedNumberMessage = `Player ${playerInfo[currentPlayer].id}, your number is ${playerInfo[currentPlayer].combinedNum}. <br>`;

    // Update player number
    // updatePlayerCombinedNumber(playerCombinedNumber);

    // Update player score
    updatePlayerScore(playerCombinedNumber);

    // Check winner
    checkWinner();

    // If less than number of players, not everyone roll yet.
    if (playerInfo[currentPlayer].id < numOfPlayers) {
      currentGameMode = DICE_ROLL_GAME_MODE;
      currentPlayer += 1;
      // Return player number to other player.
      return `${playerCombinedNumberMessage} <br>
        It is now Player ${playerInfo[currentPlayer].id}'s turn. Click Submit to roll dice.`;
    }

    // Leaderboard message
    var leaderboardOutputMessage = generateLeaderboardOutput();

    // End of game message
    var myOutputValue = `${playerCombinedNumberMessage} <br> <br> Player ${currentRoundWinner.id} won this round. <br> <br> <br> ${leaderboardOutputMessage} <br> <br> To resume play, please enter number of dice to play with and click Submit.`;

    resetGame();

    return myOutputValue;
  }
};
