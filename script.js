var diceRolls = [];

var playerNames = [];
var playerScores = [];
var playerValues = [];

var playerValuesHistory = [];
var winnerHistory = [];
var modeHistory = [];

var currentLeader = [];
var currentRound = 1;

var winnerIndexes = [];
var gameMode = "Highest";
var runningKnockoutMode = "Running";

var startRound = function (noOfDices) {
  var output = "";
  // use the number of dices and run through
  // each player in this round and let them
  // roll their dices automatically till the
  // last person

  // loop through each player
  for (
    var playerCounter = 0;
    playerCounter < playerNames.length;
    playerCounter++
  ) {
    // let player roll the number of dices allowed in this round
    diceRolls = rollTheDice(noOfDices);

    // let the program autogenerate the number based on the mode - highest/lowest
    autoGeneratedNumber = autoGenerateNumber(diceRolls, gameMode);

    // playerValues will be used to store values from all players for specifically this round
    playerValues[playerCounter] = autoGeneratedNumber;

    // playerValuesHistory will be used to store values from all players for all rounds
    playerValuesHistory[playerCounter].push(playerValues[playerCounter]);
  }

  // find the winner with either the highest number or lowest number
  winnerIndex = findWinner(playerValues);

  // check if we have a current leader, or if there are two users with the same scores
  // findCurrentLeader(winnerIndex);

  // track the mode so that we can display in our round history table
  modeHistory.push(gameMode);

  generateRoundHistory();
  findCurrentLeader();
  generatePlayerTable();

  resetRound();

  return output;
};

// returns an array of random dice values
var rollTheDice = function (noOfTimes) {
  var diceValues = [];

  for (var counter = 0; counter < noOfTimes; counter++) {
    var randomDecimal = Math.random() * 6;
    var randomWholeNumber = Math.floor(randomDecimal);
    var finalDiceValue = randomWholeNumber + 1;
    diceValues.push(finalDiceValue);
  }

  return diceValues;
};

// after all users have selected their dice values
// find a winner. returns index of playerValues
// check for potential case of users having same values
var findWinner = function (playerValues) {
  // run through loop to find highest number
  // or lowest number depending on game mode

  if (gameMode == "Highest") {
    // for highest game mode

    var max = -1;

    for (
      var playerValuesCounter = 0;
      playerValuesCounter < playerValues.length;
      playerValuesCounter++
    ) {
      if (playerValues[playerValuesCounter] > max) {
        winnerIndexes = [];
        max = playerValues[playerValuesCounter];
        winnerIndexes.push(playerValuesCounter);
      } else if (playerValues[playerValuesCounter] == max) {
        winnerIndexes.push(playerValuesCounter);
      }
    }
  } else {
    // for lowest game mode
    var min = Infinity;
    for (
      var playerValuesCounter = 0;
      playerValuesCounter < playerValues.length;
      playerValuesCounter++
    ) {
      if (playerValues[playerValuesCounter] < min) {
        winnerIndexes = [];
        min = playerValues[playerValuesCounter];
        winnerIndexes.push(playerValuesCounter);
      } else if (playerValues[playerValuesCounter] == min) {
        winnerIndexes.push(playerValuesCounter);
      }
    }
  }

  winnerHistory.push(winnerIndexes);

  for (var i = 0; i < winnerIndexes.length; i++) {
    playerScores[winnerIndexes[i]]++;
  }
};

var resetRound = function () {
  diceRolls = [];
  playerValues = [];
  winnerIndex = [];
  currentRound++;
};

var findCurrentLeader = function () {
  // find user with highest score and assign true to index that user belongs
  // in currentLeader

  // find max score
  var maxScore = Math.max(...playerScores);

  // assign true to players that have highest score
  for (
    var playerScoresCounter = 0;
    playerScoresCounter < playerScores.length;
    playerScoresCounter++
  ) {
    if (playerScores[playerScoresCounter] == maxScore) {
      currentLeader[playerScoresCounter] = true;
    } else {
      currentLeader[playerScoresCounter] = false;
    }
  }
};

var generateRoundHistory = function () {
  var table = `<div class="table-responsive"><table class="table table-bordered border-secondary text-center bg-white"><thead><tr><th>Round</th><th>Mode</th>`;

  for (var counter2 = 0; counter2 < playerNames.length; counter2++) {
    table += `<th>${playerNames[counter2]}</th>`;
  }

  table += `<th>Winner</th></tr></thead><tbody>`;

  for (var counter = 0; counter < currentRound; counter++) {
    table += `<tr><th class="text-center">${counter + 1}</th>`;

    if (modeHistory[counter] == "Highest") {
      table += `<td class="text-danger text-center">${modeHistory[counter]}</td>`;
    } else {
      table += `<td class="text-success text-center">${modeHistory[counter]}</td>`;
    }

    for (var counter2 = 0; counter2 < playerNames.length; counter2++) {
      table += `<td class="text-center">${playerValuesHistory[counter2][counter]}</td>`;
    }

    table += `<th class="text-center">`;

    if (winnerHistory[counter].length == 1) {
      table += `${playerNames[winnerHistory[counter][0]]}`;
    } else {
      for (
        var counter3 = 0;
        counter3 < winnerHistory[counter].length;
        counter3++
      ) {
        table += `${playerNames[winnerHistory[counter][counter3]]}, `;
      }
    }

    table = table.replace(/,\s*$/, "");

    table += `</th></tr>`;
  }

  table += `</tbody>`;

  table += `</table></div><hr/>`;
  document.getElementById("running-history-div").style.display = "";
  document.getElementById("running-history-table").innerHTML = table;
};

var autoGenerateNumber = function (diceRolls, gameMode) {
  if (gameMode == "highest") {
    diceRolls.sort(function (a, b) {
      return a - b;
    });
  } else {
    diceRolls.sort(function (a, b) {
      return b - a;
    });
  }

  return diceRolls.join("");
};

var addPlayer = function (playerName) {
  playerNames.push(playerName);
  playerScores.push(0);
  playerValuesHistory.push([]);
  currentLeader.push(false);

  // if player is added in between rounds,
  // fill up player values history for previous rounds
  // so that it does not appear as undefined
  if (currentRound > 1) {
    for (
      var currentRoundCounter = 1;
      currentRoundCounter < currentRound;
      currentRoundCounter++
    ) {
      playerValuesHistory[playerValuesHistory.length - 1].push("n.a.");
    }
  }

  generatePlayerTable();

  if (playerNames.length > 1) {
    document.getElementById("start-knockout-round-button").disabled = false;
    document.getElementById("start-round-button").disabled = false;
  }
};

var generatePlayerTable = function () {
  var table = `<h5 class="text-center">--- Score Board ---</h5><div class="table-responsive"><table class="table table-bordered border-secondary text-center bg-white"><thead><tr><th scope="col">Players</th>`;

  // generate player names
  for (var counter = 0; counter < playerNames.length; counter++) {
    table += `<th scope="col">${playerNames[counter]}</th>`;
  }

  table += `</tr></thead><tbody><tr><th>Score</th>`;

  // generate player score
  for (var counter = 0; counter < playerScores.length; counter++) {
    table += `<td>${playerScores[counter]}</td>`;
  }

  table += `</tr><tr><th>Leader</th>`;

  // generate leader
  for (var counter = 0; counter < currentLeader.length; counter++) {
    if (currentLeader[counter] == true) {
      table += `<td>ðŸ‘‘</td>`;
    } else {
      table += `<td></td>`;
    }
  }

  table += `</tr><tbody></table></div>`;
  document.getElementById("score-div").innerHTML = table;
  document.getElementById("dice-div").style.display = "";
};

var toggleRunningKnockoutMode = function () {
  console.log("toggleRunning");
  if (runningKnockoutMode == "Running") {
    runningKnockoutMode = "Knockout";
    document.getElementById("running-history-div").style.display = "none";
    if (currentKnockoutRound > 1) {
      document.getElementById("knockout-history-div").style.display = "";
    }
    document.getElementById("start-round-button").style.display = "none";
    document.getElementById("start-knockout-round-button").style.display = "";
    document.getElementById("running-knockout-mode").innerHTML = "Knockout";
    document.getElementById("running-knockout-mode").className =
      "mode text-success";
  } else {
    runningKnockoutMode = "Running";
    document.getElementById("knockout-history-div").style.display = "none";
    if (currentRound > 1) {
      document.getElementById("running-history-div").style.display = "";
    }
    document.getElementById("start-round-button").style.display = "";
    document.getElementById("start-knockout-round-button").style.display =
      "none";
    document.getElementById("running-knockout-mode").innerHTML = "Running";
    document.getElementById("running-knockout-mode").className =
      "mode text-danger";
  }
};
