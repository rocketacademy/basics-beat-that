//define game mode
var game_state_select_num_of_players = "select number of players";
var game_state_waiting_for_username = " waiting for player username";
var game_state_select_num_of_dice = "player select num of dice";
var game_state_roll_dice = "player roll your dice";
var game_state_autogenerate_order = "player computer autogenerates order";
var game_state_find_winner = "find winner";
var currentGameState = game_state_select_num_of_players;

var currentPlayer = 0;
var game_mode_setting = "select normal or reverse";
var game_mode_normal = "highest";
var game_mode_reverse = "lowest";
var currentGameMode = game_mode_setting;

//define global variables
var diceLists = [];
var diceSelected = "";
var userName = "";
var totalPlayers = 0;
var playerList = [];

var numOfDiceSelected = function (num) {
  var numOfDice = num;
  if (num != Number(num)) {
    return -1;
  } else {
    return Number(numOfDice);
  }
};

var diceRollList = function (numOfDice) {
  var randomDiceNum = function () {
    return Math.floor(Math.random() * 6 + 1);
  };
  var diceList = [];
  index = 0;
  while (index < numOfDice) {
    diceList.push(randomDiceNum());
    index = index + 1;
  }
  return diceList;
};

var autoGeneratedList = function (diceList, mode) {
  var sortedDiceList;
  if (mode == "highest") {
    sortedDiceList = diceList.sort(function (a, b) {
      return a - b;
    });
  } else if (mode == "lowest") {
    sortedDiceList = diceList.sort(function (a, b) {
      return b - a;
    });
  }
  return sortedDiceList;
};

var autoGeneratedNum = function (sortedDiceList) {
  var sortedListStrings = [];
  index = 0;
  while (index < sortedDiceList.length) {
    sortedListStrings.push(sortedDiceList[index].toString());
    index = index + 1;
  }
  var totalNumber = "";
  index = 0;
  while (index < sortedListStrings.length) {
    var element = sortedListStrings[index];
    totalNumber = element + totalNumber;
    index = index + 1;
  }
  return Number(totalNumber);
};

var winningOutcome = function (mode, diceLists) {
  var currentWinnerIndex;
  var currentWinningScore;
  if (mode == "highest") {
    var index = 0;
    while (index < diceLists.length) {
      var playerScore = autoGeneratedNum(diceLists[index]);
      if (
        playerScore > currentWinningScore ||
        currentWinningScore == undefined
      ) {
        currentWinningScore = playerScore;
        currentWinnerIndex = index;
      }
      index = index + 1;
    }
  }
  if (mode == "lowest") {
    var index = 0;
    while (index < diceLists.length) {
      var playerScore = autoGeneratedNum(diceLists[index]);
      if (
        playerScore < currentWinningScore ||
        currentWinningScore == undefined
      ) {
        currentWinningScore = playerScore;
        currentWinnerIndex = index;
      }
      index = index + 1;
    }
  }
  console.log(
    "current winner index",
    currentWinnerIndex,
    currentWinningScore,
    mode
  );
  return [currentWinnerIndex, currentWinningScore, mode];
};

var main = function (input) {
  //select game mode
  if (currentGameMode == game_mode_setting) {
    if (input == "reverse") {
      currentGameState = game_state_select_num_of_players;
      currentGameMode = game_mode_reverse;
      return `You have selected reverse mode ⬅️ <br> Player with LOWEST combined number win <br> Please enter number of players, Player 1`;
    } else {
      currentGameState = game_state_select_num_of_players;
      currentGameMode = game_mode_normal;
      return `You have selected normal mode. <br> Player with HIGHEST combined number wins! <br> 👉 Please enter number of players, Player 1`;
    }
  }
  //select number of players
  if (currentGameState == game_state_select_num_of_players) {
    totalPlayers = Number(input);
    currentGameState = game_state_select_num_of_dice;
    return ` ${totalPlayers} players have joined the game. <br> 👉 Please select number of 🎲 you want to roll`;
  }

  // select number of dices to roll for all players
  if (currentGameState == game_state_select_num_of_dice) {
    diceSelected = numOfDiceSelected(input);
    if (diceSelected == -1) {
      return `You have entered an invalid input. Please add a number`;
    } else {
      currentGameState = game_state_waiting_for_username;
      return `You have selected ${diceSelected} 🎲 to play. <br> 👉 Please enter your username Player 1`;
    }
  }
  //allow all user name to enter name
  if (currentGameState == game_state_waiting_for_username) {
    if (currentPlayer < totalPlayers) {
      userName = input;
      playerList.push(userName);
      currentPlayer = currentPlayer + 1;
      //bug: an additional number of player to enter username. HELP NEEDED!
      return ` 👋🏻 Welcome Current Player ${
        currentPlayer + 1
      }, <br>👉 Please enter your Username`;
    } else {
      currentGameState = game_state_roll_dice;
      // create everyone's empty dice lists first
      var index = 0;
      while (index < totalPlayers) {
        diceLists.push([]);
        index = index + 1;
      }
      currentPlayer = 0;
      return `All players have entered their username 🥳 . Hello ${playerList}! <br> 🕹 Let's proceed to roll the 🎲 for ${playerList[currentPlayer]}`;
    }
  }

  // roll dice
  if (currentGameState == game_state_roll_dice) {
    var diceList = diceRollList(diceSelected);
    diceLists[currentPlayer] = diceList;
    currentGameState = game_state_autogenerate_order;
    return `${playerList[currentPlayer]}, these are the numbers you have rolled: ${diceLists[currentPlayer]}. <br> 🕹 Click "roll the dice" for the 💻 to generate the order for you`;
  }

  //computer auto generate player numbers
  if (currentGameState == game_state_autogenerate_order) {
    var computerGeneratedList = autoGeneratedList(
      diceLists[currentPlayer],
      currentGameMode
    );
    var computerGeneratedNum = autoGeneratedNum(computerGeneratedList);
    console.log("checking for crrentplayer", currentPlayer, totalPlayers);
    if (currentPlayer >= totalPlayers - 1) {
      currentGameState = game_state_find_winner;
    } else {
      currentGameState = game_state_roll_dice;
    }
    currentPlayer = currentPlayer + 1;
    //bug above for additional player also affects the code here where there will be an undefined player!HELP NEEDED
    return `The 💻 selected this order for you ${computerGeneratedNum} <br> 🕹  
      ${playerList[currentPlayer]}
     it's your turn to roll`;
  }

  if (currentGameState == game_state_find_winner) {
    var winner = winningOutcome(currentGameMode, diceLists);
    console.log(winner, " win");
    var currentWinningIndex = winner[0];
    var currentWinningScore = winner[1];
    var mode = winner[2];

    return `Player ${
      currentWinningIndex + 1
    } wins🙌🙌🙌, winning score is ${currentWinningScore} and chosen mode is ${mode}`;
  }
};
