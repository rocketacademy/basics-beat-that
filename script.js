// Requirements
// There are 2 players and players take turns.
// When a player clicks Submit, the game rolls 2 dice and shows the dice rolls, for example 3 and 6.
// The player picks the order of the dice they want. For example, if they wanted the number 63, they would specify that the 2nd dice goes first. You can choose how the player specifies dice order.
// After both players have rolled and chosen dice order, the player with the higher combined number wins.

// More Comfortable

// Score
// Keep score for each player. The score is the running sum of all numbers that player has generated so far. This means there is no permanent winner, only a temporary leader.
// Leaderboard
// When outputting game results in the output box, also output a leaderboard that lists the 2 players and their scores in decreasing order.

// Lowest Combined Number Mode
// Add a game mode such that the player with the lowest combined number is the winner.
// Auto-Generate Combined Number
// Update the game to auto-generate the highest (or lowest) combined number from dice rolls. For example, for dice rolls [6, 3] in Lowest Combined Number mode, the game would auto-generate the combined number 36.

// Game modes
// Lowest Combined Number Mode
// Add a game mode such that the player with the lowest combined number is the winner.
var DICE_ROLL_GAME_MODE = "diceRollGameMode";
var ORDER_OF_DICE_GAME_MODE = "orderOfDiceGameMode";
var AUTO_GENERATE_DICE_ORDER_GAME_MODE = "autoGenerateDiceOrderGameMode";
var NORMAL_GAME_MODE = "normalGameMode";
var LOWEST_COMBINED_NUMBER_GAME_MODE = "lowesCombinedNumberGameMode";

// Initialise the game to start with the dice roll game mode by default - to update later in game

var inputGameMode = null;

// Start at dice roll
var currentGameMode = DICE_ROLL_GAME_MODE;

// There are 2 players and players take turns.
// The game starts with Player 1 by default - to update later in game
var currentPlayer = 1;

// Storing dice rolls
var player1DiceRolls = [];
var player2DiceRolls = [];

// Storing each player's chosen numbers
var player1CombinedNumber = null;
var player2CombinedNumber = null;

// Score Tracking
// Score
// Keep score for each player. The score is the running sum of all numbers that player has generated so far. This means there is no permanent winner, only a temporary leader.
var playerScores = [
  { number: 1, score: 0 },
  { number: 2, score: 0 },
];

// Generate random dice roll
var rollDice = function () {
  var randomDecimal = Math.random() * 6;
  var randomInteger = Math.floor(randomDecimal);
  var diceNumber = randomInteger + 1;
  return diceNumber;
};

// Generate dice rolls and add to respective lists
var getDiceRolls = function () {
  var currentDiceRolls = [rollDice(), rollDice()];

  if (currentPlayer === 1) {
    player1DiceRolls = currentDiceRolls;
  } else {
    player2DiceRolls = currentDiceRolls;
  }

  return currentDiceRolls;
};

// Obtain combined number - convert to string and then back to number type
var getCombinedNumber = function (number1, number2) {
  return Number(String(number1) + String(number2));
};

// Sorting list of scores for combined number game modes
// Auto-Generate Combined Number
// Update the game to auto-generate the highest (or lowest) combined number from dice rolls. For example, for dice rolls [6, 3] in Lowest Combined Number mode, the game would auto-generate the combined number 36.
var sortList = function (listArray) {
  var listLength = listArray.length;

  for (var i = 0; i < listLength - 1; i += 1) {
    for (var j = 0; j < listLength - 1; j += 1) {
      if (listArray[j] > listArray[j + 1]) {
        var compare = listArray[j];
        listArray[j] = listArray[j + 1];
        listArray[j + 1] = compare;
      }
    }
  }
  return listArray;
};

// Check player number, storing combined number
var getPlayerNumber = function (diceNumberChosen) {
  // Check current list and assign to access accordingly
  var diceList = null;
  var chosenNumber = null;

  if (currentPlayer === 1) {
    diceList = player1DiceRolls;
  } else {
    diceList = player2DiceRolls;
  }
  // Check and assign chosen number - accessing index respectively
  if (diceNumberChosen === 1) {
    chosenNumber = getCombinedNumber(diceList[0], diceList[1]);
  } else {
    chosenNumber = getCombinedNumber(diceList[1], diceList[0]);
  }

  // Store player num in the relevant global player num variable
  if (currentPlayer === 1) {
    player1CombinedNumber = chosenNumber;
  } else {
    player2CombinedNumber = chosenNumber;
  }

  // Return generated player num to parent function
  return chosenNumber;
};

// Check who wins
var checkWinner = function () {
  if (player1CombinedNumber > player2CombinedNumber) {
    return 1;
  }
  return 2;
};

// Check player number, storing combined number

var generatePlayerNumber = function () {
  // Check current list and assign to access accordingly
  var diceList = null;
  var chosenNumber = null;

  if (currentPlayer === 1) {
    diceList = player1DiceRolls;
  } else {
    diceList = player2DiceRolls;
  }

  sortList(diceList);

  // Sort list small to big
  // Lowest Combined Number Mode
  // Add a game mode such that the player with the lowest combined number is the winner.
  while (diceList.length > 0) {
    var biggestNumber = diceList.pop();

    // 1st iteration is just number itself
    if ((chosenNumber = null)) {
      chosenNumber = biggestNumber;
    } // Combine to get number for lowest
    else {
      if (inputGameMode == LOWEST_COMBINED_NUMBER_GAME_MODE) {
        chosenNumber = getCombinedNumber(biggestNumber, chosenNumber);
      } // If not it's normal mode, biggest number
      else {
        chosenNumber = getCombinedNumber(chosenNumber, biggestNumber);
      }
    }
  }

  // Store player num in the relevant global player num variable
  if (currentPlayer === 1) {
    player1CombinedNumber = chosenNumber;
  } else {
    player2CombinedNumber = chosenNumber;
  }

  // Return generated player num to parent function
  return chosenNumber;
};

// Store player num in the relevant global player num variable
var updatePlayerCombinedNumber = function (chosenNumber) {
  if (currentPlayer === 1) {
    player1CombinedNumber = chosenNumber;
  } else {
    player2CombinedNumber = chosenNumber;
  }
};

// Check who wins
// More comfortable - check game modes and update conditions
var checkWinner = function () {
  if (
    inputGameMode == NORMAL_GAME_MODE &&
    player1CombinedNumber > player2CombinedNumber
  ) {
    return 1;
  } else if (
    inputGameMode == LOWEST_COMBINED_NUMBER_GAME_MODE &&
    player1CombinedNumber < player2CombinedNumber
  ) {
    return 1;
  }
  return 2;
};

// Access and update global player scores
var updatePlayerScore = function (currentScore) {
  if (currentPlayer === 1) {
    playerScores[0].score += currentScore;
  }
  if (currentPlayer == 2) {
    playerScores[1].score += currentScore;
  }
};

// Leaderboard
// When outputting game results in the output box, also output a leaderboard that lists the 2 players and their scores in decreasing order.
var generateLeaderboardOutput = function () {
  var leaderboardOutput = "Leaderboard: <br>";

  // Check game modes and conditions
  if (inputGameMode == NORMAL_GAME_MODE) {
    // Loop through list to check biggest number, from front, else from back
    if (playerScores[0].score > playerScores[1].score) {
      for (var i = 0; i < playerScores.length; i += 1) {
        leaderboardOutput +=
          "Player " +
          playerScores[i].number +
          ": " +
          playerScores[i].score +
          "<br>";
      }
    } else if (playerScores[1].score > playerScores[0].score) {
      for (var i = playerScores.length - 1; i >= 0; i -= 1) {
        leaderboardOutput +=
          "Player " +
          playerScores[i].number +
          ": " +
          playerScores[i].score +
          "<br>";
      }
    }
    return leaderboardOutput;
  }
  if (inputGameMode == LOWEST_COMBINED_NUMBER_GAME_MODE) {
    // Loop through list to check smallest number, from front, else from back
    if (playerScores[0].score < playerScores[1].score) {
      for (var i = 0; i < playerScores.length; i += 1) {
        leaderboardOutput +=
          "Player " +
          playerScores[i].number +
          ": " +
          playerScores[i].score +
          "<br>";
      }
    } else if (playerScores[1].score < playerScores[0].score) {
      for (var i = playerScores.length - 1; i >= 0; i -= 1) {
        leaderboardOutput +=
          "Player " +
          playerScores[i].number +
          ": " +
          playerScores[i].score +
          "<br>";
      }
    }
    return leaderboardOutput;
  }
};

// Reset game
var resetGame = function () {
  currentPlayer = 1;
  currentGameMode = DICE_ROLL_GAME_MODE;
};

// Welcome Player 1.
// You rolled 3 for Dice 1 and 6 for Dice 2.
// Choose the order of the dice.

// Player 1, you chose Dice 2 first.
// Your number is 63.
// It is now Player 2's turn.

var main = function (input) {
  // When a player clicks Submit, the game rolls 2 dice and shows the dice rolls, for example 3 and 6.
  // More comfortable
  // Input validation
  if (!inputGameMode) {
    if (
      input != NORMAL_GAME_MODE &&
      input != LOWEST_COMBINED_NUMBER_GAME_MODE
    ) {
      return (
        `You have entered an invalid game mode. Please choose 1 of the game modes to begin: <br> 1. ` +
        NORMAL_GAME_MODE +
        `<br> 2. ` +
        LOWEST_COMBINED_NUMBER_GAME_MODE
      );
    }
    inputGameMode = input;
    return (
      `You have chosen ` +
      inputGameMode +
      ` mode. Player ` +
      currentPlayer +
      ` , click submit to roll dice`
    );
  }
  if (currentGameMode === DICE_ROLL_GAME_MODE) {
    // Get dice rolls for curr player and populate the curr player's dice array
    var getCurrentDiceRolls = getDiceRolls();
    // After generating, proceed to order of dice
    currentGameMode = ORDER_OF_DICE_GAME_MODE;
    // Output message as above
    // More comfortable - edited message
    return `Welcome Player ${currentPlayer}. <br>
      You rolled ${getCurrentDiceRolls[0]} for Dice 1 and ${getCurrentDiceRolls[1]} for Dice 2. <br>
      Click submit to get combined number.`;
  }

  // The player picks the order of the dice they want. For example, if they wanted the number 63, they would specify that the 2nd dice goes first. You can choose how the player specifies dice order.
  // More comfortable -  generate automatically
  if (currentGameMode == AUTO_GENERATE_DICE_ORDER_GAME_MODE) {
    // Obtain the information for player
    var playerCombinedNumber = generatePlayerNumber();
    var playerCombinedNumberMessage = `Player ${currentPlayer}, your number is ${playerCombinedNumber}. <br>`;

    // Update player number
    updatePlayerCombinedNumber(playerCombinedNumber);

    // Update player score
    updatePlayerScore(playerCombinedNumber);

    // If Player 1, change to Player 2, reset to dice roll mode
    if (currentPlayer === 1) {
      currentPlayer = 2;
      currentGameMode = DICE_ROLL_GAME_MODE;
      // Return player number to Player 1, let Player 2 know it is their turn
      return `${playerCombinedNumberMessage} <br>
        It is now Player 2's turn. Click Submit to roll dice.`;
    }
    // Else check winner and output accordingly.
    var winningPlayer = checkWinner();

    // Reset game after winner is checked
    resetGame();

    // Leaderboard message
    var leaderboardOutputMessage = generateLeaderboardOutput();

    // Return end of game message
    return `${playerCombinedNumberMessage} <br>
      Player ${winningPlayer} has won this round. <br>
      Player 1's number: ${player1CombinedNumber} <br> Player 2's number: ${player2CombinedNumber} <br> <br> ${leaderboardOutputMessage} <br> <br>
      The End of Round :) Press Submit to play again!`;
  }
};
